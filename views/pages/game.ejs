<% extend('../layouts/base_layout', {title: 'GRID'}) %>

<div id="app" v-cloak>
	<div id="canvas" v-bind:class="'flex items-center justify-center w-full h-full fixed top-0 left-0 style-'+style + ' role-'+role">
        <div v-bind:style="'width:'+(gridW + marginCanvas)+'px; height:'+(gridH + marginCanvas)+'px;'" class="relative">
        <div id="parchment" v-if="style=='fantasy' && gridW>0" v-bind:style="'width:'+(gridW + marginCanvas)+'px; height:'+(gridH + marginCanvas)+'px;'" class="absolute top-0 left-0"></div>
        <div id="metal" class="metal linear" v-if="style=='scifi' && gridW>0" v-bind:style="'width:'+(gridW + marginCanvas)+'px; height:'+(gridH + marginCanvas)+'px;'" class="absolute top-0 left-0"></div>
        <transition name="fade">
           <div id="toast-text" class="toast text-gray-500" v-if="toastText">{{ toastText }}</div>
        </transition>
        <transition name="fade">
            <div id="toast-error" class="toast text-red-500 z-10" v-if="toastError">{{ toastError }}</div>
        </transition>
		<svg v-bind:viewBox="'0 0 ' + gridW + ' ' + gridH" class="absolute" v-bind:style="'top:' + marginCanvas/2 +'px; left:'+marginCanvas/2+'px;'" v-bind:width="gridW" v-bind:height="gridH">
            <defs>
                <mask id="masked" maskUnits="userSpaceOnUse" v-if="role=='player'">
                    <rect x="0" y="0" v-bind:width="gridW" v-bind:height="gridH" fill="white" />
                    <rect v-for="mask in masks" v-bind:x="getVal(mask.x)-4" v-bind:y="getVal(mask.y)-4" v-bind:width="getDist(mask.width)+8" v-bind:height="getDist(mask.height)+8" fill="#000"></rect>
                </mask>
                <clipPath id="cut-off-bottom">
                    <rect x="0" y="0" width="200" height="100" />
                </clipPath>
            </defs>
			<!-- grid -->
            <g id="vertices-group">
			<line class="grid-vertice" v-for="line in grid" v-bind:x1="getVal(line.x1)" v-bind:x2="getVal(line.x2)" v-bind:y1="getVal(line.y1)" v-bind:y2="getVal(line.y2)" />
            </g>

			<!-- grid tiles -->
            <g id="tiles-group">
			<rect v-show="tilesActive" v-for="(tile, key) in tiles" class="grid-tile" v-bind:x="getVal(tile.x) + paddingTileFactor * gridSize" v-bind:y="getVal(tile.y) + paddingTileFactor * gridSize" v-bind:width="gridSize - 2*paddingTileFactor*gridSize" v-bind:height="gridSize - 2*paddingTileFactor*gridSize" v-on:click="tileClick(key)"/>
            </g>

			<!-- drawn lines -->
            <g id="lines-group">
			<line  v-for="(line, key) in lines" mask="url(#masked)" v-bind:class="'grid-line element ' + (activeElement == line ? ' active' : '')" v-bind:x1="getVal(line.x1)" v-bind:x2="getVal(line.x2)" v-bind:y1="getVal(line.y1)" v-bind:y2="getVal(line.y2)" v-on:click="lineClick(key)"/>
            </g>

			<!-- texts -->
            <g id="texts-group">
			<text v-for="(text, key) in texts" mask="url(#masked)" v-bind:class="'grid-text element ' + (activeElement == text ? ' active' : '')" v-bind:x="getVal(text.x)" v-bind:y="getVal(text.y) + textFontSize / 2" v-on:click="textClick" data-type="text" v-bind:data-key="key" v-bind:style="'font-size: ' + textFontSize + 'px;'" dominant-baseline="middle">{{ text.text }}</text>
            </g>

            <!-- characters -->
            <g id="characters-group">
			<circle v-for="(char, key) in characters" mask="url(#masked)"  v-bind:class="'character' + (activeElement == char ? ' active' : '')" v-bind:tooltip="char.name" v-bind:cx="getVal(char.tile.x) + gridSize/2" v-bind:cy="getVal(char.tile.y) + gridSize/2" v-bind:r="gridSize * 0.4" v-bind:fill="char.color.fill" v-bind:stroke="char.color.stroke" v-on:click="characterClick(key)" v-on:mouseover="tooltipMouseOver" v-on:mouseout="tooltipMouseOut" ></circle>
			<text class="character-initials select-none" mask="url(#masked)" v-for="(char, key) in characters" v-bind:x="getVal(char.tile.x) + gridSize/2" v-bind:y="getVal(char.tile.y) + gridSize/2" text-anchor="middle" dominant-baseline="middle">{{ char.initials }}</text>
            </g>

            <!-- game master mask drawing box -->
            <rect v-if="role=='gm' && drawType=='masks' && activePoint" v-bind:x="getVal(maskDrawRect.x)" v-bind:y="getVal(maskDrawRect.y)" v-bind:width="getDist(maskDrawRect.w)" v-bind:height="getDist(maskDrawRect.h)" fill="rgba(255,0,0,.5)" stroke="#f00"></rect>

            <!-- game master masks -->
            <g id="masks-group">
                <rect v-if="role=='gm' && masksShow" v-for="(mask, key) in masks" v-bind:class="'gm-mask-rect' + (activeElement == mask ? ' active' : '')" v-bind:x="getVal(mask.x)-4" v-bind:y="getVal(mask.y)-4" v-bind:width="getDist(mask.width)+8" v-bind:height="getDist(mask.height)+8" fill="rgba(100,0,0,.6)" v-on:click="maskClick(key)"></rect>
            </g>

            <!-- grid points -->
            <g id="points-group">
                <rect v-show="pointsActive" v-for="(point, key) in points" v-bind:class="'grid-point' + (activePoint == point ? ' active' : '')" v-bind:x="getVal(point.x) - point.r" v-bind:y="getVal(point.y) - point.r" v-bind:width="point.r*2" v-bind:height="point.r*2" v-on:click="pointClick(key)" v-on:mouseover="pointMouse(key)"/>
            </g>
        </svg>
        </div>
	</div><!-- canvas -->

	<!-- Menu -->
	<transition name="fade">
		<div id="menu" v-cloak v-if="menuShow" class="text-white rounded-bl-md px-2 py-6 fixed z-20 top-0 right-0 bg-blue-400 w-64 drop-shadow">
			<div class="font-bold text-sm">ID: {{gameId}}</div>
			<div v-if="connected" class="font-bold text-sm text-green-400">Connected as: {{name}}</div>
			<div v-else class="text-red-400 font-bold cursor-pointer" v-on:click="connect">Not connected <i class="fa fa-redo"></i></div>
            <label for="role-select">Role:</label>
            <select id="role-select" v-model="role" class="block px-3 py-1.5 text-base font-normal bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none text-gray-800">
                <option v-for="(val, key) in roles" v-bind:value="key">{{ val }}</option>
            </select>
            <hr />
            <div v-if="role=='gm'">
			<div>Draw:</div>
			<label for="draw-lines-btn" class="draw-label"><input type="checkbox" id="draw-lines-btn" v-model="draw.lines" v-on:change="drawBtnClick('lines')"/>Lines</label>

			<hr />

			<label for="draw-character-btn" class="draw-label"><input type="checkbox" id="draw-character-btn" v-model="draw.character" v-on:change="drawBtnClick('character')"/>Character</label>
			<div class="form-group" v-if="draw.character" >
				<label for="" class="small block">Name:</label>
				<input autofocus type="text" v-model="drawCharacterName" class="text-gray-800" placeholder="Legolas" v-on:keyup="characterNameKeyUp"/>
			</div>
			<div class="form-group" v-if="draw.character" >
				<label for="" class="small block">Initials:</label>
				<input type="text" v-model="drawCharacterInitials" class="text-gray-800" placeholder="LE" maxlength="2" />
				<div class="menu-error" v-if="drawCharacterError">{{ drawCharacterError }}</div>
			</div>
			<div v-if="draw.character" class="draw-label">
				<div v-for="color in characterColors" v-bind:class="'character-color text-gray-800' + (color == drawCharacterColor ? ' active' : '')" v-bind:style="'border: 3px solid ' + color.stroke + '; background: ' + color.fill + ';'" v-on:click="drawCharacterColor = color">{{ drawCharacterInitials }}</div>
			</div>
			<div class="small" v-if="draw.character">Click on a tile to place character</div>

			<hr />

			<label for="draw-text-btn"><input type="checkbox" id="draw-text-btn" v-model="draw.text" v-on:change="drawBtnClick('text')"/>Text</label>
			<input autofocus type="text" v-if="draw.text" class="text-gray-800" v-model="drawTextValue" placeholder="This is a chair"/>
			<div class="small" v-if="draw.text">Click on the grid to place text</div>
			<div class="menu-error" v-if="drawTextError">{{ drawTextError }}</div>
			<hr />
            <label for="draw-masks-btn" class="draw-label"><input type="checkbox" id="draw-masks-btn" v-model="draw.masks" v-on:change="drawBtnClick('masks')"/>Masks</label>
            <label for="show-masks-btn" class="draw-label"><input type="checkbox" id="show-masks-btn" v-model="masksShow"/>Masks Visible</label>

            <hr />
<!--            <div class="form-group"><div class="btn-orange" v-on:click="clearElements">Clear Elements</div></div>-->
<!--            <div class="form-group"><div class="btn-red" v-on:click="clearCharacters">Clear Characters</div></div>-->
            </div>
			<div class="form-group"><div class="btn-blue" v-on:click="modalNameShow=true">Change Name</div></div>
			<hr />
            <label for="style-select">Style:</label>
            <select id="style-select" v-model="style" class="block px-3 py-1.5 text-base font-normal bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none text-gray-800">
                <option v-for="(val, key) in styles" v-bind:value="key">{{ val }}</option>
            </select>
            <hr />
			<div class="pb-4 text-sm"><span class="font-bold">Players:</span>
				<div v-for="user in users">{{ user.name }}</div>
			</div>
			<div class="pb-0 text-right">
				<i class="fa fa-info-circle text-2xl cursor-pointer" v-on:click="modalInfoShow=true"></i>
			</div>
			<!-- <label for="draw-boxes-btn"><input type="checkbox" id="draw-boxes-btn" v-model="draw.boxes" v-on:change="drawBtnClick('boxes')"/>Boxes</label> -->
			<!-- <label for="draw-circles-btn"><input type="checkbox" id="draw-circles-btn" v-model="draw.circles" v-on:change="drawBtnClick('circles')"/>Circles</label> -->
		</div>
	</transition>
	<div id="menu-button" v-if="enabled" v-on:click="menuShow=!menuShow" class="btn-blue px-0 w-10 fixed top-1 right-1 z-30">
		<transition name="fade">
			<i class="fas fa-times" v-if="menuShow"></i>
			<i class="fas fa-bars" v-else></i>
		</transition>
	</div>

	<transition name="fade">
	<div id="tooltip" v-if="tooltipTarget" class="z-5 px-2 py-0.5 rounded bg-black text-white inline-block fixed" v-bind:style="'left: '+tooltipLeft + 'px; top: '+ tooltipTop + 'px'">{{ tooltipTarget.getAttribute('tooltip') }}</div>
	</transition>
		<!-- name modal -->
	<transition name="fade">
		<div v-if="modalInfoShow" class="fixed z-50 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
			<div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
				<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

				<!-- This element is to trick the browser into centering the modal contents. -->
				<span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
				<div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
					<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
						<div class="sm:flex sm:items-start">
							<div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                                <div class="pb-4">
                                    <div class="font-bold text-lg pb-2">Drawing</div>
                                    <p class="pb-2"><span class="font-bold">Lines</span>: Tick "Lines" and select points in the grid to draw lines between them. Select a point again to deselect (or press escape). <br>Lines can be removed by selecting them and pressing delete key.</p>
                                    <p class="pb-2"><span class="font-bold">Characters</span>: Tick "Characters", Fill names, select colour and select a grid tile to place. <br>Characters can be moved by selecting them and selecting a new tile.</p>
                                    <p class="pb-0"><span class="font-bold">Text</span>: Tick "Text", fill the input and select a grid point to place it by. Can be selected and deleted.</p>
                                </div>
                                <div class="pb-4">
                                    <div class="font-bold text-lg pb-2">Keyboard:</div>
                                    <div><span class="font-bold">ESC</span>: Deselect</div>
                                    <div><span class="font-bold">Del</span>: Delete selected</div>
                                    <div><span class="font-bold">CTRL+z</span>: Undo</div>
                                </div>
							</div>
						</div>
					</div>
					<div class="bg-gray-50 px-4 py-3 text-center">
                        <div class="btn-blue" v-on:click="modalInfoShow=false">OK</div>
					</div>
				</div>
			</div>
		</div>
	</transition>
	<transition name="fade">
	<div v-if="modalNameShow" class="fixed z-50 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
		<div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
			<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

			<!-- This element is to trick the browser into centering the modal contents. -->
			<span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
			<div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md sm:w-full">
				<form v-on:submit.prevent="setName">
				<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
					<div class="sm:flex sm:items-start">
						<div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
							<label class="block text-gray-700 text-lg mb-2" for="name">
								Enter your name
							</label>
							<input autofocus id="name" v-model="name" name="name" type="text" placeholder="Legolas" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
						</div>
					</div>
				</div>
				<div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
					<input type="submit" value="Go!" class="btn-blue bg-blue-500 w-full" />
				</div>
				</form>
			</div>
		</div>
	</div>
	</transition>
<svg>
    <filter id="wavy1">
        <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="5"></feTurbulence>
        <feDisplacementMap in="SourceGraphic" scale="5"></feDisplacementMap>
    </filter>
    <filter id="wavy2">
        <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="1"></feTurbulence>
        <feDisplacementMap in="SourceGraphic" scale="20"></feDisplacementMap>
    </filter>
    <filter id="blue-glow" filterUnits="userSpaceOnUse"
            x="-50" y="-50" v-bind:width="gridW + 100" v-bind:height="gridH + 100">
        <!-- blur the text at different levels-->
        <feGaussianBlur in="SourceGraphic" stdDeviation="1" result="blur1"/>
        <feGaussianBlur in="SourceGraphic" stdDeviation="5" result="blur5"/>
        <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur10"/>
        <feGaussianBlur in="SourceGraphic" stdDeviation="20" result="blur20"/>
        <feGaussianBlur in="SourceGraphic" stdDeviation="30" result="blur30"/>
        <feGaussianBlur in="SourceGraphic" stdDeviation="50" result="blur50"/>
        <!-- merge all the blurs except for the first one -->
        <feMerge result="blur-merged">
            <feMergeNode in="blur10"/>
            <feMergeNode in="blur20"/>
            <feMergeNode in="blur30"/>
            <feMergeNode in="blur50"/>
        </feMerge>
        <!-- recolour the merged blurs blue -->
        <feColorMatrix result="blue-blur" in="blur-merged" type="matrix"
                       values="0 0.05 0.05 0 0
                             0 0.1 0.3 0 0
                             1 0 0 0 0
                             0 0 0 1 0" />
        <feMerge>
            <feMergeNode in="blue-blur"/>       <!-- largest blurs coloured red -->
            <feMergeNode in="blur5"/>          <!-- smallest blur left white -->
            <feMergeNode in="blur5"/>          <!-- smallest blur left white -->
            <feMergeNode in="SourceGraphic"/>  <!-- original white text -->
        </feMerge>
    </filter>
</svg>
</div><!-- app 0-->
<script type="text/javascript">
const gameId = '<%= gameId %>';
const data = <%= JSON.stringify(data) %>;
</script>
<script type="text/javascript" src="/js/app_game.js?v=<%= process.env.APP_VERSION %>"></script>